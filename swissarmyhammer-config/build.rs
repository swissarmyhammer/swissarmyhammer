use std::env;
use std::fmt::Write;
use std::fs;
use std::path::Path;

fn main() {
    // Tell Cargo to re-run this build script if the builtin directory changes
    println!("cargo:rerun-if-changed=../builtin");

    let out_dir = env::var("OUT_DIR").unwrap();

    // Generate builtin agents
    generate_builtin_agents(&out_dir);
}

fn generate_builtin_agents(out_dir: &str) {
    let dest_path = Path::new(&out_dir).join("builtin_agents.rs");

    // Get the manifest directory (where Cargo.toml is located)
    let manifest_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let builtin_dir = Path::new(&manifest_dir).join("../builtin/agents");

    let mut code = String::new();
    code.push_str("// Auto-generated builtin agents - do not edit manually\n");
    code.push_str("// Generated by build.rs from builtin/agents directory\n\n");
    code.push_str("/// Get all built-in agents as a vector of (name, content) tuples\n");
    code.push_str("pub fn get_builtin_agents() -> Vec<(&'static str, &'static str)> {\n");
    code.push_str("    vec![\n");

    if builtin_dir.exists() {
        if let Ok(entries) = fs::read_dir(&builtin_dir) {
            let mut entries: Vec<_> = entries.collect();
            entries.sort_by_key(|entry| entry.as_ref().unwrap().path());

            for entry in entries.into_iter().flatten() {
                let path = entry.path();
                let name = path.file_name().unwrap().to_string_lossy();

                if path.is_file() && name.ends_with(".yaml") {
                    // Generate the agent name using file stem (e.g., qwen-coder.yaml -> qwen-coder)
                    let agent_name = name.strip_suffix(".yaml").unwrap_or(&name);

                    // Read the file content at build time and embed it as a string literal
                    if let Ok(content) = fs::read_to_string(&path) {
                        writeln!(code, "        (\"{agent_name}\", r#\"{content}\"#),").unwrap();
                    }
                }
            }
        }
    }

    code.push_str("    ]\n");
    code.push_str("}\n");

    fs::write(&dest_path, code).unwrap();
}
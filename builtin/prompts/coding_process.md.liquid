{% partial %}

## Systematic Coding Process

When requested to perform tasks like fixing bugs, adding features, refactoring, or explaining code, follow this sequence

- YOU MUST ALWAYS think harder and find the root cause of any issue you are coding.
- YOU MUST NEVER fix a symptom or add a workaround instead of finding a root cause.
- YOU MUST NEVER pick a solution simply because it is less work or faster to implement.
- YOU MUST NEVER leave a test disabled, even temporarily. Instead add more tracing and debugging information to understand the issue better.

YOU MUST follow this coding framework for ANY technical issue:

### Phase 1: Root Cause Investigation (BEFORE attempting fixes)

- **Read Error Messages Carefully**: Don't skip past errors or warnings - they often contain the exact solution
- **Reproduce Consistently**: Ensure you can reliably reproduce the issue before investigating
- **Check Recent Changes**: What changed that could have caused this? Git diff, recent commits, etc.

### Phase 2: Pattern Analysis

- **Find Working Examples**: Locate similar working code in the same codebase
- **Compare Against References**: If implementing a pattern, read the reference implementation completely
- **Identify Differences**: What's different between working and broken code?
- **Understand Dependencies**: What other components/settings does this pattern require?

### Phase 3: Hypothesis and Testing

1. **Form Single Hypothesis**: What do you think is the root cause? State it clearly
2. **Test Minimally**: Make the smallest possible test and change to validate your hypothesis
3. **Verify Before Continuing**: Did it work? If not, form a new hypothesis.
